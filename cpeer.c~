/*****************************************************
                       cpeer.c
             peer client implementation
       Authors: Mihir Joshi, Fenil Kavathia
                     csc573 NCSU
*****************************************************/

#include "sock/csock.h"
#include "sock/ssock.h"
#include<string.h>
#include "parser/parse.h"
#include<signal.h>
#include<pthread.h>
#include<stdbool.h>

#define SERVER_PORT 7752
#define SERVER_ADDR "127.0.0.1"
#define BUFSIZE 256

int ssock;
int csock;
int port;
int pid;

void s_peer(int outpipe);
void c_peer(int inpipe);
bool download_content(int rfc_no,char* hostname,int port);
void *handle_peer(void *arg);


void segv(int signum)
{
  int status;

  close_sock(ssock);

  printf("\npress ctrl + c to exit\n");

  wait(&status);

  signal(signum, SIG_DFL);
  kill(getpid(), signum);
}

int main(int argc, char **argv)
{
 int pfd[2];

 pipe(pfd);

//now we need to fork the process

 signal(SIGINT, segv);

pid=fork();

if(pid==0)
	{
		close(pfd[0]);
		s_peer(pfd[1]);
	}
else
	{
		close(pfd[1]);
		c_peer(pfd[0]);
	}
}

void s_peer(int outpipe)
{
	int cssock;
	int id;
	char buf[BUFSIZE];
	struct sockaddr_in addr;
	
	socklen_t addr_len;
	char myport[50], myhostname[50];
	pthread_attr_t attr;
	pthread_t threads;

        srand(time(NULL));
	port=(rand()%(65535-1024))+1024;
	//right now we need to know the port no. so assigned fix one
	//port=5000;
	//server socket(speer)
	ssock=get_sock();

	#ifdef GRAN1
	printf("[gran 1] created socket\n");
	#endif

	// bind socket
  	bind_sock(ssock, port);

	#ifdef GRAN1
		printf("[gran 1] bind socket\n");
	#endif

	addr_len = sizeof(addr);

	if(getsockname(ssock, (struct sockaddr * )&addr, &addr_len) == -1)
	{
		printf("[error] not able to get socket name\n");
		return;
	}

	sprintf(myport, "%d", ntohs(addr.sin_port));
   	/*sprintf(myhostname, "%d.%d.%d.%d", 
	(int)(addr.sin_addr.s_addr&0xFF), 
	    (int)((addr.sin_addr.s_addr&0xFF00)>>8),
		    (int)((addr.sin_addr.s_addr&0xFF00)>>16),
			    (int)((addr.sin_addr.s_addr&0xFF00)>>24));

	*/

	read_my_ip(myhostname);

	printf("sending port: %s host: %s\n", myport, myhostname);

	write_to(outpipe, myport, 50);
	
	write_to(outpipe, myhostname, 50);

	close(outpipe);

	  //listen now   " I am not sure whether this should be done in child process (speer process) or here itself"
	listen_sock(ssock);

	#ifdef GRAN1
	printf("[gran 1] now listening\n");
	#endif
	pthread_attr_init(&attr);
	while(1)
        {
    	  // ready to accept connection
	  //communication with one peer completed

    	  cssock = accept_con(ssock);
	  id=cssock;
	  // create a thread to handle client peer
       	  pthread_create(&threads, &attr, handle_peer, &id);
    		
          
	}
	pthread_join(threads, NULL);
}

void c_peer(int inpipe)
{
 	int choice, i;
	char buf1[BUFSIZE];
	char myport[50], myhostname[50];
	int rfc;
	char title[50];

	char c_rfc[50], host[50], port[50];

	//client socket (cpeer);
	//get client socket descriptor  
	csock = get_sock();

	read_from(inpipe, myport, 50);
	read_from(inpipe, myhostname, 50);

	close(inpipe);

	printf("received port: %s host: %s\n", myport, myhostname);

	//connect to server socket
	//connect_to(sock, SERVER_ADDR, SERVER_PORT);  //this is for communication between cpeer and server
	//right now assume we are using this function to connect  to server peer 
	connect_to(csock, SERVER_ADDR, SERVER_PORT);   //used 5000 port because we don't know server peer port

	do
	{
	memset(buf1,0,BUFSIZE);	
	printf("***********Welcome to Peer to Peer RFC Document Transfer Application***********");
	printf("Make sure you have rfc folder in current directory");
	printf("\nPress 1 for Add\n");
	printf("Press 2 for Lookup and download\n");
	printf("Press 3 for list\n");	
//	printf("Press 4 to Download the RFC\n");
	printf("Press 4 for Terminate: \n");
	scanf("%d",&choice);

	switch(choice)
		{
		case 1:
			printf("\n Please Enter RFC Number: ");
			scanf("%d", &rfc);                    //what if user by mistake write wrong rfc no?
							      //whether we should automatically do this when client server 								      //starts	in begining
							      //what is the proof that I have that file??
						

			printf("\nPlease Enter RFC Title: ");
			scanf("%s", title);

			generate_request(buf1, ADD, rfc, myhostname, myport, title); 
		break;
		case 2:
			printf("\n Please Enter RFC Number: ");
			scanf("%d", &rfc);

			printf("\nPlease Enter RFC Title: ");
			scanf("%s", title);
			generate_request(buf1, LOOKUP, rfc, myhostname, myport, title);
		break;
		case 3:	
			generate_request(buf1, LISTALL, 1000, myhostname, myport, "sample");  //why 1000,sample
		
		
			//printf("please wait while your file is being downloaded");
                         //can't  write function call here as I don't have buf1 content here
			break;			
		case 4:			
        	printf("Thank you for using Program\n");
		close_sock(csock);
		raise(SIGINT);
		return;
		break;
 		//add default case
		}
	
         //If user press 4 then we need to disable write_to and read_from otherwise it will be written to  boot server 
	 
	     //server will handle this and generete bad request if user type anything
		
	write_to(csock, buf1, BUFSIZE);

	 read_from(csock, buf1, BUFSIZE);
	printf("Boot Server Response is \n%s",buf1);
	
 	if(choice == 2)
	{
	i = 0;
	printf("please wait while your file is downloaded");
	
	
	bool status=false;
 		while(parse_response(buf1, i, c_rfc, title, host, port) != -1)
		{
	   	printf("\nI understand that rfc %s is with %s:%s\n", c_rfc, host, port);
	   	status=download_content(rfc,host,atoi(port));  //i am using rfc no here not rfc array
		
			if(status==true)
			{
				printf("Your file is sucessfully downloaded");
				//here we can send add request to server if we want to	
				break;	
			}
			else
			{
				i++;
			}
	
		}
		printf("Sorry your file couldn't be downloaded");
	}
	//

	 //printf("\n%s\n", buf1);

	 //return 0;	

	}while(choice!=4);
}


void *handle_peer(void *arg)
{
char buf[BUFSIZE];
 int cssock = *(int *) arg;
 FILE *fp;
 int size=0;
 int sent;
 char err_buf[20];
	
 	
#ifdef APP
 printf("[log] I am handling cpeer thread : %d", csock);
#endif

//somewhere here new node will be added to linklist	
 // read from client
 

	read_from(cssock, buf, BUFSIZE);
	char *temp=buf;
	#ifdef APP
	 printf("\n[log] Peer client says: %s\n", buf);
	#endif
        
	fp=fopen(buf,"r");  //here we can make one rfc folder in current directory and put all files there
	if(fp!=NULL)
	{
		fseek(fp,0,SEEK_END);
		size=ftell(fp);
		fseek(fp,0,SEEK_SET);
		char send_buf[size];              //we don't know the file size in advance (It will be a waste for files which are 
						  //relatively small	
		#ifdef APP
		 printf("[log] writing to  Peer client %s\n", buf);
		#endif
		 
		memset(send_buf, 0, sizeof(send_buf));


	    	while((sent = fread(send_buf, sizeof(char), sizeof(send_buf), fp)) > 0)
	    	{
		printf("file content is:\n%s\n",send_buf); 
		write_to(cssock, send_buf, sent);
		
		memset(send_buf, 0, sizeof(send_buf));
	    	}
	    fclose(fp);
	    printf("File operation Completed"); 	
	}
	else
	{
        	memset(err_buf,0,sizeof(err_buf));  
		perror("Server File Error:");
		strcpy(err_buf,"!@#$%^&*");
		write_to(cssock, err_buf, 20);  	
	 
 	}
	 
 	close_sock(cssock);

#ifdef APP
 printf("[log] client socket closed %d\n", cssock);
#endif

 pthread_exit(NULL);
}

bool download_content(int rfc_no,char* hostname,int port)
{
int tsock;
//char *filename;
char filename[BUFSIZE];
char file_data[1000];
char temp_buf[8];
FILE *fp;
tsock=get_sock();
connect_to(tsock,SERVER_ADDR, port);
sprintf(filename,"./rfc/%d.txt",rfc_no);  //file should be in rfc folder in current directory
write_to(tsock, filename, BUFSIZE);
read_from(tsock, file_data,1000);
//not sure whether to close socket here or after evverythng done
if(strcmp(strncpy(temp_buf,file_data,8),"!@#$%^&*")==0)
{
	printf("One of the Peer doesn't content File. Connecting to Different Peer Server");
	close_sock(tsock);	
	printf("closeing peer client socket: and connecting to different peer server one%d\n", tsock);
	return false;
}
else
{
	printf("\nPeer server %s has the file and please wait while it delivers file\n",hostname);
	fp=(filename,"w");   //rfc folder should be there 
	if(fp!=NULL)
		{
		fwrite(file_data,sizeof(char),sizeof(file_data),fp);  //here chances are there that dummy content may be appened 
		printf("file download completed");	
		close_sock(tsock);
		printf("closing	 peer client socket: %d\n", tsock);
		return true;
		}
	else
		{
		printf("couldn't generate file");
		perror("Peer client Error: ");
		close_sock(tsock);
		printf("closing peer client socket: %d\n", tsock);
		return false;   //here problem is client side so we should not try connecting to different peer because same will 					//happen again
		}	
}
} 

