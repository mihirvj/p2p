!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADD	parser/parse.h	/^  ADD = 0,$/;"	e	enum:__anon2
ADDRFC	parser/parse.h	13;"	d
BOOT_OBJ	Makefile	/^BOOT_OBJ=boot.o $/;"	m
BUFSIZE	boot.c	17;"	d	file:
BUFSIZE	cpeer.c	19;"	d	file:
BadRequest	parser/parse.h	/^  BadRequest = 400,$/;"	e	enum:__anon1
CPEER_OBJ	Makefile	/^CPEER_OBJ=cpeer.o $/;"	m
CRLF	parser/parse.h	9;"	d
C_HEADERS	Makefile	/^C_HEADERS=sock\/csock.h sock\/data.h sock\/ssock.h$/;"	m
C_OBJS	Makefile	/^C_OBJS=sock\/csock.o sock\/data.o sock\/ssock.o parser\/parse.o$/;"	m
ERROR	parser/parse.h	10;"	d
EXEC_PATH	Makefile	/^EXEC_PATH=exec$/;"	m
FLAGS	Makefile	/^FLAGS=-DAPP -g -DGRAN1$/;"	m
FLAGS	ds/Makefile	/^FLAGS=-DP2P$/;"	m
FLAGS	sock/Makefile	/^FLAGS=-DSOCK$/;"	m
GCC	Makefile	/^GCC=gcc$/;"	m
GCC	ds/Makefile	/^GCC=gcc$/;"	m
GCC	sock/Makefile	/^GCC=gcc$/;"	m
GET	parser/parse.h	/^  GET = 1,$/;"	e	enum:__anon2
GETRFC	parser/parse.h	12;"	d
HEADERS	ds/Makefile	/^HEADERS=ll\/hostll.h ll\/rfcll.h$/;"	m
HEADERS	sock/Makefile	/^HEADERS=csock.h ssock.h data.h$/;"	m
LISTALL	parser/parse.h	/^  LISTALL = 3$/;"	e	enum:__anon2
LISTALLRFC	parser/parse.h	15;"	d
LOOKUP	parser/parse.h	/^  LOOKUP = 2,$/;"	e	enum:__anon2
LOOKUPRFC	parser/parse.h	14;"	d
MAX_CONNECTIONS	sock/ssock.h	5;"	d
NotFound	parser/parse.h	/^  NotFound = 404,$/;"	e	enum:__anon1
OBJS	ds/Makefile	/^OBJS=ll\/hosll.o ll\/rfcll.o$/;"	m
OBJS	sock/Makefile	/^OBJS=csock.o ssock.o data.o$/;"	m
OK	parser/parse.h	/^  OK = 200,$/;"	e	enum:__anon1
PLIB	Makefile	/^PLIB=-lpthread$/;"	m
PORT	boot.c	16;"	d	file:
SERVER_ADDR	cpeer.c	18;"	d	file:
SERVER_PORT	cpeer.c	17;"	d	file:
SIZE	parser/parse.h	17;"	d
SPACE	parser/parse.h	8;"	d
S_HEADERS	Makefile	/^S_HEADERS=ds\/ll\/hostll.h ds\/ll\/rfcll.h sock\/ssock.h sock\/data.h $/;"	m
S_OBJS	Makefile	/^S_OBJS=ds\/ll\/hostll.o ds\/ll\/rfcll.o sock\/ssock.o sock\/data.o parser\/parse.o $/;"	m
VERSION	parser/parse.h	7;"	d
VersionNotFound	parser/parse.h	/^  VersionNotFound = 505$/;"	e	enum:__anon1
accept_con	sock/ssock.c	/^int accept_con(int sock)$/;"	f
add_hnode	ds/ll/hostll.c	/^void add_hnode(hnode **head, char *hostname,int port)$/;"	f
add_node	ds/bst/bst.c	/^void add_node(int data)$/;"	f
add_node	ds/bst/ll/ll.c	/^void add_node(int key, int data)$/;"	f
add_node	ds/ll/.ll.c	/^void add_node(node **head, int key, int data)$/;"	f
add_rnode	ds/ll/rfcll.c	/^void add_rnode(rnode **head,int rfc_no,char *title,char *hostname,int port)$/;"	f
add_to_tree	ds/bst/bst.c	/^void add_to_tree(bst *node, bst *ptr)$/;"	f
append_response	parser/parse.c	/^void append_response(char buf[1000], int rfc, char host[50], char port[50], char title[50])$/;"	f
binary_search_tree	ds/bst/bst.h	/^typedef struct binary_search_tree$/;"	s
bind_sock	sock/ssock.c	/^void bind_sock(int sock, int port)$/;"	f
bst	ds/bst/bst.h	/^}bst;$/;"	t	typeref:struct:binary_search_tree
c_peer	cpeer.c	/^void c_peer(int inpipe)$/;"	f
clear	boot.c	/^void clear(int signum)$/;"	f
close_sock	sock/data.c	/^void close_sock(int sock)$/;"	f
connect_to	sock/csock.c	/^void connect_to(int sock, char *server_addr, int port)$/;"	f
csock	cpeer.c	/^int csock;$/;"	v
data	ds/bst/bst.h	/^  int data;$/;"	m	struct:binary_search_tree
data	ds/bst/ll/ll.h	/^  int data;$/;"	m	struct:ll
data	ds/ll/.ll.h	/^  int data;$/;"	m	struct:ll
delete_hnode	ds/ll/hostll.c	/^int delete_hnode(hnode **head, char *hostname)$/;"	f
delete_node	ds/ll/.ll.c	/^int delete_node(node **head, int key)$/;"	f
delete_rnode	ds/ll/rfcll.c	/^int delete_rnode(rnode **head, char *hostname)$/;"	f
destroy_hlist	ds/ll/hostll.c	/^void destroy_hlist(hnode **head)$/;"	f
destroy_list	ds/ll/.ll.c	/^void destroy_list(node **head)$/;"	f
destroy_rlist	ds/ll/rfcll.c	/^void destroy_rlist(rnode **head)$/;"	f
download_content	cpeer.c	/^bool download_content(int rfc_no,char* hostname,int port)$/;"	f
error	sock/data.c	/^void error(char *msg)$/;"	f
generate_request	parser/parse.c	/^void generate_request(char req[1000], int req_type, int rfc, char host[50], char port[50], char title[50])$/;"	f
generate_response	parser/parse.c	/^void generate_response(char buf[1000], int code, int method)$/;"	f
get_sock	sock/data.c	/^int get_sock()$/;"	f
handle_con	boot.c	/^void *handle_con(void *arg)$/;"	f
handle_peer	cpeer.c	/^void *handle_peer(void *arg)$/;"	f
head	ds/bst/ll/ll.c	/^node *head = NULL;$/;"	v
hnode	ds/ll/hostll.h	/^}hnode;$/;"	t	typeref:struct:hostnode
host	ds/ll/hostll.h	/^  char *host;$/;"	m	struct:hostnode
host	ds/ll/rfcll.h	/^  char *host;$/;"	m	struct:rfcnode
host_head	boot.c	/^hnode *host_head;$/;"	v
hostnode	ds/ll/hostll.h	/^typedef struct hostnode$/;"	s
htraversal	ds/ll/hostll.c	/^void htraversal(hnode *head)$/;"	f
key	ds/bst/ll/ll.h	/^  int key;$/;"	m	struct:ll
key	ds/ll/.ll.h	/^  int key;$/;"	m	struct:ll
last	ds/bst/ll/ll.c	/^node *last = NULL;$/;"	v
left	ds/bst/bst.h	/^  struct binary_search_tree *left;$/;"	m	struct:binary_search_tree	typeref:struct:binary_search_tree::binary_search_tree
listen_sock	sock/ssock.c	/^void listen_sock(int sock)$/;"	f
ll	ds/bst/ll/ll.h	/^typedef struct ll$/;"	s
ll	ds/ll/.ll.h	/^typedef struct ll$/;"	s
locate_node	ds/bst/bst.c	/^void locate_node(bst *node, int data)$/;"	f
lookupall	ds/ll/.ll.c	/^node** lookupall(node *head, int key)$/;"	f
main	boot.c	/^int main(int argc, char **argv)$/;"	f
main	cpeer.c	/^int main(int argc, char **argv)$/;"	f
main	parser/stub.c	/^int main()$/;"	f
main	speer.c	/^int main(int argc, char **argv)$/;"	f
next	ds/bst/ll/ll.h	/^  struct ll *next;$/;"	m	struct:ll	typeref:struct:ll::ll
next	ds/ll/.ll.h	/^  struct ll *next;$/;"	m	struct:ll	typeref:struct:ll::ll
next	ds/ll/hostll.h	/^  struct hostnode *next;$/;"	m	struct:hostnode	typeref:struct:hostnode::hostnode
next	ds/ll/rfcll.h	/^  struct rfcnode *next;$/;"	m	struct:rfcnode	typeref:struct:rfcnode::rfcnode
node	ds/bst/ll/ll.h	/^}node;$/;"	t	typeref:struct:ll
node	ds/ll/.ll.h	/^}node;$/;"	t	typeref:struct:ll
parse_line	parser/parse.c	/^int parse_line(char out[SIZE], char *buf, int line_no, int *method)$/;"	f
parse_line_1	parser/parse.c	/^int parse_line_1(char out[SIZE], char *line, int *method)$/;"	f
parse_line_2	parser/parse.c	/^int parse_line_2(char out[SIZE], char *line)$/;"	f
parse_line_3	parser/parse.c	/^int parse_line_3(char out[SIZE], char *line)$/;"	f
parse_line_4	parser/parse.c	/^int parse_line_4(char out[SIZE], char *line)$/;"	f
parse_request	parser/parse.c	/^int parse_request(char request[1000], char rfc[50], char host[50], char port[50], char title[100], int *method)$/;"	f
parse_response	parser/parse.c	/^int parse_response(char buf[1000], int index, char rfc[50], char title[50], char host[50], char port[50])$/;"	f
pid	cpeer.c	/^int pid;$/;"	v
port	cpeer.c	/^int port;$/;"	v
port	ds/ll/hostll.h	/^  int port;	$/;"	m	struct:hostnode
port	ds/ll/rfcll.h	/^  int port;$/;"	m	struct:rfcnode
print_tree	ds/bst/bst.c	/^void print_tree(bst *node)$/;"	f
read_from	sock/data.c	/^int read_from(int sock, char *buffer, int buf_len)$/;"	f
read_my_ip	sock/csock.c	/^void read_my_ip(char ip[50])$/;"	f
reverse	ds/bst/ll/ll.c	/^void reverse()$/;"	f
rfc_head	boot.c	/^rnode *rfc_head;$/;"	v
rfc_no	ds/ll/rfcll.h	/^  int rfc_no;$/;"	m	struct:rfcnode
rfcnode	ds/ll/rfcll.h	/^typedef struct rfcnode$/;"	s
right	ds/bst/bst.h	/^  struct binary_search_tree *right;$/;"	m	struct:binary_search_tree	typeref:struct:binary_search_tree::binary_search_tree
rlookupall	ds/ll/rfcll.c	/^void rlookupall(rnode *head, int rfc_no, rnode **list)$/;"	f
rnode	ds/ll/rfcll.h	/^}rnode;$/;"	t	typeref:struct:rfcnode
root	ds/bst/bst.c	/^bst *root = NULL;$/;"	v
rtraverse	ds/ll/rfcll.c	/^void rtraverse(rnode *head)$/;"	f
s_peer	cpeer.c	/^void s_peer(int outpipe)$/;"	f
segv	boot.c	/^void segv(int signum)$/;"	f
segv	cpeer.c	/^void segv(int signum)$/;"	f
sock	boot.c	/^int sock;$/;"	v
ssock	cpeer.c	/^int ssock;$/;"	v
title	ds/ll/rfcll.h	/^  char *title;	$/;"	m	struct:rfcnode
trace_node	ds/bst/bst.c	/^void trace_node(int data)$/;"	f
traverse	ds/bst/bst.c	/^void traverse()$/;"	f
traverse	ds/bst/ll/ll.c	/^void traverse()$/;"	f
traverse	ds/ll/.ll.c	/^void traverse(node *head)$/;"	f
update_node	ds/bst/ll/ll.c	/^int update_node(int key, int new_data)$/;"	f
update_node	ds/ll/.ll.c	/^int update_node(node *head, int key, int new_data)$/;"	f
write_to	sock/data.c	/^int write_to(int sock, char *buffer, int buf_len)$/;"	f
